package htmlflow.flowifier.test;

import java.lang.reflect.Method;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;
import java.util.logging.Logger;

import javax.tools.JavaCompiler;
import javax.tools.JavaCompiler.CompilationTask;
import javax.tools.JavaFileObject;
import javax.tools.JavaFileObject.Kind;
import javax.tools.SimpleJavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.StandardLocation;
import javax.tools.ToolProvider;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.junit.Test;
import junit.framework.Assert;
import htmlflow.HtmlView;
import htmlflow.flowifier.Flowifier;

public class TestFlowifierWikipedia {

	/**
     * A file object used to represent source coming from a string.
     */
    private static final class JavaSourceFromString extends SimpleJavaFileObject {
        /**
         * The source code of this "file".
         */
        private final String code;

        /**
         * Constructs a new JavaSourceFromString.
         * @param name the name of the compilation unit represented by this file object
         * @param code the source code for the compilation unit represented by this file object
         */
        private JavaSourceFromString(String name, String code) {
            super(URI.create("string:///" + name.replace('.','/') + Kind.SOURCE.extension),
                  Kind.SOURCE);
            this.code = code;
        }

        @Override
        public CharSequence getCharContent(boolean ignoreEncodingErrors) {
            return code;
        }
    }
	
    @Test
    public void testFlowifierTuerSourceforgeHomepage() throws Exception {
		testFlowifier("http://tuer.sourceforge.net/en/");
	}
    
	@Test
    public void testFlowifierWikipediaHomepage() throws Exception {
		testFlowifier("https://en.wikipedia.org");
	}
	
	private void testFlowifier(final String url) throws Exception {
		final Flowifier flowifier = new Flowifier();
		final String htmlFlowJavaClassSourceCodeWithHtmlViewGetter = flowifier.toFlow(url);
		// shows the generated Java source code
		Logger.getLogger("htmlflow.flowifier.test").info(htmlFlowJavaClassSourceCodeWithHtmlViewGetter);
		// compiles this Java class
		final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		final StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, StandardCharsets.UTF_8);
		final String className = "Flowified";
		final JavaSourceFromString compilationUnit = new JavaSourceFromString(className, htmlFlowJavaClassSourceCodeWithHtmlViewGetter);
		final CompilationTask compilerTask = compiler.getTask(null, fileManager, null, 
				Arrays.asList("-classpath",System.getProperty("java.class.path")), null, 
				Collections.singletonList(compilationUnit));
		final boolean compilationSuccessful = compilerTask.call();
		Assert.assertTrue(compilationSuccessful);
		if (compilationSuccessful) {
			// gets the default location of the class files
			final JavaFileObject classFileObject = fileManager.getJavaFileForOutput(StandardLocation.CLASS_OUTPUT, className, Kind.CLASS, null);
			// gets the content of the generated class file
			final URI classFileUri = classFileObject.toUri();
			final Path classFilePath = Paths.get(classFileUri);
			final byte[] classFileContent = Files.readAllBytes(classFilePath);
			// deletes the class file to keep the workspace clean
			classFileObject.delete();
			// gets a mean of loading a class at runtime
			final ClassLoader classLoader = getClass().getClassLoader();
			//FIXME create a brand new class loader, loads the classes from the classpath and the generated class into this class loader to get rid of the warning
			final Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
			defineClassMethod.setAccessible(true);
			// loads the generated class into the current class loader
			final Class<?> generatedClass = (Class<?>) defineClassMethod.invoke(classLoader, className, classFileContent, Integer.valueOf(0), Integer.valueOf(classFileContent.length));
			// gets the single declared method
			final Method getHtmlViewMethod = generatedClass.getMethod("get");
			// gets the HtmlView instance
			final HtmlView<?> htmlView = (HtmlView<?>) getHtmlViewMethod.invoke(null);
			// disables the indentation for testing purposes
			htmlView.setIndented(false);
			// gets the HTML source code generated by HtmlFlow
			final String generatedHtmlSourceCode = htmlView.render();
			Logger.getLogger("htmlflow.flowifier.test").info(generatedHtmlSourceCode);
			// gets the original HTML document
			final Document doc = Jsoup.connect(url).get();
			final String originalHtmlSourceCode = doc.root().outerHtml();
			Logger.getLogger("htmlflow.flowifier.test").info(originalHtmlSourceCode);
			// compares the original HTML to the generated HTML
			Assert.assertTrue(originalHtmlSourceCode.replaceAll("\\s", "").replaceAll("\\h", "").replaceAll("\\v", "").equalsIgnoreCase(
					          generatedHtmlSourceCode.replaceAll("\\s", "").replaceAll("\\h", "").replaceAll("\\v", "")));
		}
	}
}
